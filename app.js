const $=s=>document.querySelector(s), $$=s=>Array.from(document.querySelectorAll(s));
const state={name:"",age:null,activity:null,model:null,lastGuess:null};
function addBubble(t,w="bot"){const el=document.createElement("div");el.className=`bubble ${w}`;el.textContent=t;$("#chatLog").appendChild(el);$("#chatLog").scrollTop=$("#chatLog").scrollHeight;}
let speakingEnabled=true, voices=[];function populateVoices(){voices=speechSynthesis.getVoices();const sel=$("#voiceSelect");if(!sel)return;sel.innerHTML="";voices.forEach((v,i)=>{const o=document.createElement("option");o.value=i;o.textContent=`${v.name} (${v.lang})`;sel.appendChild(o)});const idx=voices.findIndex(v=>/English|en-/i.test(v.lang));if(idx>=0) sel.value=idx;}function speak(text){ if(!speakingEnabled||!("speechSynthesis" in window)) return; const u=new SpeechSynthesisUtterance(text); const idx=parseInt($("#voiceSelect")?.value||"0",10); if(voices[idx]) u.voice=voices[idx]; u.pitch=1.1; u.rate=0.95; speechSynthesis.cancel(); speechSynthesis.speak(u); }
async function askAI(message){ const body={message,name:state?.name||"",age:state?.age||"5-8"}; const r=await fetch("/api/ask",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(body)}); if(!r.ok) throw new Error("server"); const data=await r.json(); return data.text||"Try again?"; }
const jokes=["Teddy bear said no to dessert—stuffed!","Nacho cheese!","Math book was sad—too many problems!"]; const rnd=n=>Math.floor(Math.random()*n), pick=a=>a[rnd(a.length)]; let pendingQuiz=null; function mathQuiz(age="5-8"){let a,b,op;if(age==="2-4"){a=rnd(5)+1;b=rnd(5)+1;op="+";} else {a=rnd(10)+1;b=rnd(10)+1;op:Math.random()>0.5?"+":"-";} const ans=op==="+"?a+b:a-b; return {question:`Okay! What is ${a} ${op} ${b}?`, check:x=>Number(x)===ans, answer:ans};}
function handleChildQuery(raw){const m=(raw||"").toLowerCase().trim();const name=state.name?`, ${state.name}`:""; if(!m) return "I didn’t hear anything. Try again?"; if(pendingQuiz){const g=m.match(/-?\d+/)?.[0]; if(g!==undefined && pendingQuiz.check(g)){ pendingQuiz=null; return `Yay${name}! ${g} is correct! 🎉 Want another question or a joke?`; } else if(g!==undefined){ const c=pendingQuiz.answer; pendingQuiz=null; return `Nice try${name}! The right answer was ${c}. Want a different question or a joke?`; } } if(/(hello|hi|hey)/.test(m)) return pick([`Hi${name}! 👋 Ready to play?`,`Hey${name}! I can tell jokes or do math!`,`Hello${name}! What shall we do next?`]); if(/name/.test(m)) return `I’m the Kids AI Helper! And you are ${state.name||"my friend"} 🤝`; if(/joke/.test(m)) return pick(jokes); if(/math|quiz|question/.test(m)){ pendingQuiz = mathQuiz(state.age||"5-8"); return pendingQuiz.question; } return `Cool${name}! You said: “${raw}”. Want a joke or a math quiz?`; }
let recognition=null, recognizing=false; function setupRecognition(){ const SR=window.SpeechRecognition||window.webkitSpeechRecognition; if(!SR) return null; const r=new SR(); r.lang="en-US"; r.continuous=false; r.interimResults=false; r.onstart=()=>{recognizing=true; $("#micBtn").textContent="🛑 Stop";}; r.onend=()=>{recognizing=false; $("#micBtn").textContent="🎙️ Hold to Talk";}; r.onresult=async e=>{const text=Array.from(e.results).map(res=>res[0].transcript).join(" ").trim(); if(!text) return; addBubble(text,"user"); try{ const ai=await askAI(text); addBubble(ai,"bot"); speak(ai);} catch{ const fb=handleChildQuery(text); addBubble(fb,"bot"); speak(fb);} }; return r; }
async function startCamera(){ try{ const s=await navigator.mediaDevices.getUserMedia({video:true,audio:false}); $("#video").srcObject=s; }catch{ alert("Camera needs permission + HTTPS."); } }
function snapPhoto(){ const v=$("#video"), c=$("#photoCanvas"), ctx=c.getContext("2d"); const w=c.width,h=c.height, vw=v.videoWidth||640,vh=v.videoHeight||480; const sc=Math.min(w/vw,h/vh), nw=vw*sc, nh=vh*sc, dx=(w-nw)/2,dy=(h-nh)/2; ctx.clearRect(0,0,w,h); ctx.drawImage(v,dx,dy,nw,nh); applyFilter($("#filterSelect").value); }
function applyFilter(type){ const c=$("#photoCanvas"), ctx=c.getContext("2d"); const w=c.width,h=c.height; const img=ctx.getImageData(0,0,w,h), d=img.data; if(type==="grayscale"){ for(let i=0;i<d.length;i+=4){ const a=(d[i]+d[i+1]+d[i+2])/3; d[i]=d[i+1]=d[i+2]=a; } } else if(type==="invert"){ for(let i=0;i<d.length;i+=4){ d[i]=255-d[i]; d[i+1]=255-d[i+1]; d[i+2]=255-d[i+2]; } } ctx.putImageData(img,0,0); }
function downloadCanvas(c,fn){ const a=document.createElement("a"); a.href=c.toDataURL("image/png"); a.download=fn; a.click(); }
const drawCanvas=$("#drawCanvas"); const dctx=drawCanvas.getContext("2d",{willReadFrequently:true}); let drawing=false, brushColor="#1982c4", brushSize=10; function setColor(c){ brushColor=c; $$(".swatch").forEach(s=>s.setAttribute("aria-checked", String(s.dataset.color===c))); } function startDraw(x,y){ drawing=true; dctx.lineCap="round"; dctx.lineJoin="round"; dctx.strokeStyle=brushColor; dctx.lineWidth=brushSize; dctx.beginPath(); dctx.moveTo(x,y); } function moveDraw(x,y){ if(!drawing) return; dctx.lineTo(x,y); dctx.stroke(); } function endDraw(){ drawing=false; dctx.closePath(); } function canvasPos(evt,canvas){ const r=canvas.getBoundingClientRect(); const x=(evt.touches?evt.touches[0].clientX:evt.clientX)-r.left; const y=(evt.touches?evt.touches[0].clientY:evt.clientY)-r.top; return {x: x*(canvas.width/r.width), y: y*(canvas.height/r.height)}; } function addSticker(e){ dctx.font="48px serif"; dctx.fillText(e, Math.random()*(drawCanvas.width-60)+20, Math.random()*(drawCanvas.height-60)+60); }
const LABEL_MAP={"tabby":"cat","tiger cat":"cat","Egyptian cat":"cat","lynx":"cat","Siamese cat":"cat","Persian cat":"cat","kitten":"cat","golden retriever":"dog","Labrador retriever":"dog","beagle":"dog","puppy":"dog","jay":"bird","magpie":"bird","hen":"bird","robin":"bird","ostrich":"bird","goldfish":"fish","tench":"fish","rock beauty":"fish","puffer":"fish","car":"car","sports car":"car","minivan":"car","jeep":"car","tree":"tree","palm":"tree","Christmas tree":"tree","house":"house","daisy":"flower","sunflower":"flower","lotus":"flower","apple":"apple","banana":"banana"};
const PIC_FOR={"cat":"public/cat.svg","dog":"public/dog.svg","bird":"public/bird.svg","fish":"public/fish.svg","car":"public/car.svg","tree":"public/tree.svg","house":"public/house.svg","flower":"public/flower.svg","apple":"public/apple.svg","banana":"public/banana.svg"};
async function loadMobileNet(){ try{ const m=await mobilenet.load(); state.model=m; return m; }catch{ return null; } }
async function guessDrawing(){ const model=await loadMobileNet(); if(!model){ $("#aiGuessLabel").textContent="Model failed to load."; return; } const tmp=document.createElement("canvas"); tmp.width=224; tmp.height=224; const t=tmp.getContext("2d"); t.fillStyle="#fff"; t.fillRect(0,0,224,224); t.drawImage(drawCanvas,0,0,224,224); const preds=await model.classify(tmp); if(!preds?.length){ $("#aiGuessLabel").textContent="I can't tell. Try again!"; return; } let best=preds[0].className; for(const [k,v] of Object.entries(LABEL_MAP)){ if(best.toLowerCase().includes(k.toLowerCase())){ best=v; break; } } state.lastGuess=String(best).toLowerCase(); const msg=`I think this is a ${state.lastGuess}!`; $("#aiGuessLabel").textContent=msg; speak(msg); showPictureForGuess(); }
function showPictureForGuess(){ const g=state.lastGuess, box=$("#aiPicBox"); if(!g){ box.classList.add("hidden"); return; } const src=PIC_FOR[g]; if(!src){ box.textContent="No picture yet."; box.classList.remove("hidden"); return; } box.innerHTML=`<img alt="${g}" src="${src}">`; box.classList.remove("hidden"); }
function showApp(activity){ $("#appRoot").classList.remove("hidden"); $$(".app-section").forEach(s=>s.classList.toggle("hidden", s.dataset.app!==activity)); const nice=state.name?`Hi, ${state.name}!`:"Hi there!"; $("#welcomeBanner").textContent=`${nice} You chose ${activity.toUpperCase()}.`; if(activity==="talk"){ const hello=`Hello${state.name?`, ${state.name}`:""}! Ask me anything, or say "math quiz".`; addBubble(hello,"bot"); speak(hello); } if(activity==="draw") loadMobileNet(); }
window.addEventListener("DOMContentLoaded",()=>{ if("speechSynthesis" in window){ populateVoices(); speechSynthesis.onvoiceschanged=populateVoices; } $("#muteBtn").addEventListener("click",()=>{ speakingEnabled=!speakingEnabled; $("#muteBtn").textContent=speakingEnabled?"🔊 Voice On":"🔇 Voice Off"; }); $("#toStep2").addEventListener("click",()=>{ const n=$("#kidName").value.trim(); if(!n) return $("#kidName").focus(); state.name=n; goToStep(2); }); $$("[data-back]").forEach(b=>b.addEventListener("click",()=>stepBack())); $$(".age-card").forEach(c=>c.addEventListener("click",()=>{ state.age=c.dataset.age; goToStep(3); })); $$(".activity-card").forEach(c=>c.addEventListener("click",()=>{ state.activity=c.dataset.activity; $("#onboarding").classList.add("hidden"); showApp(state.activity); if(state.activity==="photo") startCamera(); })); $("#changeChoice").addEventListener("click",()=>{ $("#appRoot").classList.add("hidden"); $("#onboarding").classList.remove("hidden"); goToStep(3); }); $("#typeBtn").addEventListener("click",()=>{ $("#typeBox").classList.toggle("hidden"); $("#textInput").focus(); }); $("#sendBtn").addEventListener("click",async()=>{ const t=$("#textInput").value.trim(); if(!t) return; $("#textInput").value=""; addBubble(t,"user"); try{ const ai=await askAI(t); addBubble(ai,"bot"); speak(ai);}catch{ const fb=handleChildQuery(t); addBubble(fb,"bot"); speak(fb);} }); const rec=setupRecognition(); recognition=rec; if(!rec){ $("#micBtn").disabled=true; $("#micBtn").textContent="🎙️ Not supported"; } else { let recognizing=false; $("#micBtn").addEventListener("mousedown",()=>{ if(!recognizing){ recognizing=true; rec.start(); }}); $("#micBtn").addEventListener("mouseup",()=>{ if(recognizing){ recognizing=false; rec.stop(); }}); } $("#startCamBtn").addEventListener("click", startCamera); $("#snapBtn").addEventListener("click", snapPhoto); $("#filterSelect").addEventListener("change", e=>applyFilter(e.target.value)); $("#downloadPhotoBtn").addEventListener("click",()=>{ const c=$("#photoCanvas"); const a=document.createElement("a"); a.href=c.toDataURL("image/png"); a.download="my_photo.png"; a.click(); }); $$(".swatch").forEach(b=>b.addEventListener("click",()=>setColor(b.dataset.color))); $("#brushSize").addEventListener("input", e=>brushSize=+e.target.value); const start=e=>{ const p=canvasPos(e,drawCanvas); startDraw(p.x,p.y); }; const move=e=>{ const p=canvasPos(e,drawCanvas); moveDraw(p.x,p.y); }; const end=()=>endDraw(); drawCanvas.addEventListener("mousedown",start); drawCanvas.addEventListener("mousemove",move); window.addEventListener("mouseup",end); drawCanvas.addEventListener("touchstart",start,{passive:false}); drawCanvas.addEventListener("touchmove",e=>{e.preventDefault(); move(e);},{passive:false}); drawCanvas.addEventListener("touchend",end); $$(".sticker").forEach(b=>b.addEventListener("click",()=>{ addSticker(b.textContent); })); $("#clearBtn").addEventListener("click",()=>dctx.clearRect(0,0,drawCanvas.width,drawCanvas.height)); $("#saveDrawingBtn").addEventListener("click",()=>{ const a=document.createElement("a"); a.href=drawCanvas.toDataURL("image/png"); a.download="my_drawing.png"; a.click(); }); $("#aiGuessBtn").addEventListener("click", guessDrawing); $("#showPicBtn").addEventListener("click", showPictureForGuess);}); let currentStep=1; function goToStep(n){ currentStep=n; $$(".step").forEach(s=>s.classList.toggle("active", Number(s.dataset.step)===n)); } function stepBack(){ if(currentStep===1) return; goToStep(currentStep-1); }